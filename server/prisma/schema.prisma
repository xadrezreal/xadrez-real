generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  FREEMIUM
  PREMIUM
}

enum TournamentStatus {
  WAITING
  IN_PROGRESS
  FINISHED
}

enum PrizeDistribution {
  WINNER_TAKES_ALL
  SPLIT_TOP_2
  SPLIT_TOP_4
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      Role     @default(FREEMIUM)
  balance   Float    @default(0.0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdTournaments Tournament[] @relation("TournamentCreator")
  participatingTournaments TournamentParticipant[]

  @@map("users")
}

model Tournament {
  id                    String            @id @default(cuid())
  name                  String
  entryFee             Float             @default(0.0)
  playerCount          Int
  prizeDistribution    PrizeDistribution @default(SPLIT_TOP_2)
  status               TournamentStatus  @default(WAITING)
  startTime            DateTime
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  
  creatorId            String
  creator              User              @relation("TournamentCreator", fields: [creatorId], references: [id])
  participants         TournamentParticipant[]

  @@map("tournaments")
}

model TournamentParticipant {
  id           String @id @default(cuid())
  tournamentId String
  userId       String
  joinedAt     DateTime @default(now())
  
  tournament   Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([tournamentId, userId])
  @@map("tournament_participants")
}

model GameState {
  id        String   @id @default(cuid())
  gameId    String   @unique
  state     Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("game_states")
}
